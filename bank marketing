{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mohan22github/file/blob/main/bank%20marketing\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7lY1Y1oF1XqT"
      },
      "source": [
        "# PracticalWeek04 - Neural Network\n",
        "Pre-process the Bank Marketing Subscription dataset. The data is related with direct marketing campaigns (phone calls) of a Portuguese banking institution.  \n",
        "The **classification goal** is to predict if the client will subscribe a term deposit (variable y).<br><br>\n",
        "\n",
        "Dataset: BankingMarketing.csv\n",
        "\n",
        "**Outline:**  \n",
        "Participants are expected to demonstrate proficiency in: - <br>\n",
        "1. Loading dataset into a Pandas DataFrame\n",
        "2. Find:\n",
        "       - number of rows and columns, len(df)\n",
        "       - listing all columns, len(df.columns)\n",
        "       - finding the basic statistics of all column, describe ()\n",
        "       - Listing the basic information of the columns, info ()\n",
        "3. Handle missing values\n",
        "    - Find how many missing values there are in the columns.\n",
        "    - Remove any missing values.\n",
        "4. Print the frequent distribution of the education column.\n",
        "5. Reduce the categories in education column.\n",
        "6. Select and perform a suitable encoding method data.\n",
        "7. Perform data transformation using:\n",
        "  - StandardScaler\n",
        "  - MinMaxScaler\n",
        "8. Split data into train and test sets based on an 80/20 rule.   Target data is the y column and independent is in the remaining column.\n",
        "9. Build Neural Network Model with Keras → Train the model\n",
        "10. Evaluate the model:\n",
        "  - Accuracy\n",
        "  - Precision\n",
        "  - recall\n",
        "  - receiver operating characteristic (ROC) curve\n",
        "  - area under the curve (AUC)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N4pbsHo-5OE3"
      },
      "source": [
        "### Mount Google Drive"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Mq9NPdL50iLW",
        "outputId": "cf46ffdd-78a3-4c0f-f9f7-9ddc2d80f7a0"
      },
      "source": [
        "import io\n",
        "import requests\n",
        "from google.colab import drive\n",
        "drive.mount('/content/gdrive', force_remount=True)"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/gdrive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tiTFrFpz5WJn"
      },
      "source": [
        "### 1. Loading dataset in Pandas dataframe"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "izlwhelu1e0b"
      },
      "source": [
        "import pandas as pd\n",
        "DATA_DIR = \"/content/Banking_Marketing.csv\"\n",
        "Banking_Marketing_df = pd.read_csv (DATA_DIR, header=0)"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OQUxmSDhXk8r"
      },
      "source": [
        "### 2. Find:\n",
        "       - number of rows and columns, len(df)\n",
        "       - listing all columns, len(df.columns)\n",
        "       - finding the basic statistics of all column, describe ()\n",
        "       - Listing the basic information of the columns, info ()"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rinPeqDm2Jpm",
        "outputId": "9707ceb9-ad49-46e7-8ce4-0c0517f6ebd5"
      },
      "source": [
        "print(\"Print number of rows: {}\".format(len(Banking_Marketing_df)))\n",
        "\n",
        "print(\"Print number of columns: {}\".format(len(Banking_Marketing_df.columns)))\n",
        "print()\n",
        "\n",
        "print(\"Listing all columns: \")\n",
        "print(Banking_Marketing_df.head())\n",
        "print()\n",
        "\n",
        "print(\"Display basic statistic of all columns: \")\n",
        "print(Banking_Marketing_df.describe())\n",
        "print()\n",
        "\n",
        "print(\"Display basic information of the columns: \")\n",
        "print(Banking_Marketing_df.info())"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Print number of rows: 41199\n",
            "Print number of columns: 21\n",
            "\n",
            "Listing all columns: \n",
            "    age          job  marital          education  default housing loan  \\\n",
            "0  44.0  blue-collar  married           basic.4y  unknown     yes   no   \n",
            "1  53.0   technician  married            unknown       no      no   no   \n",
            "2  28.0   management   single  university.degree       no     yes   no   \n",
            "3  39.0     services  married        high.school       no      no   no   \n",
            "4  55.0      retired  married           basic.4y       no     yes   no   \n",
            "\n",
            "    contact month day_of_week  ...  campaign  pdays  previous     poutcome  \\\n",
            "0  cellular   aug         thu  ...         1    999         0  nonexistent   \n",
            "1  cellular   nov         fri  ...         1    999         0  nonexistent   \n",
            "2  cellular   jun         thu  ...         3      6         2      success   \n",
            "3  cellular   apr         fri  ...         2    999         0  nonexistent   \n",
            "4  cellular   aug         fri  ...         1      3         1      success   \n",
            "\n",
            "  emp_var_rate  cons_price_idx  cons_conf_idx  euribor3m  nr_employed  y  \n",
            "0          1.4          93.444          -36.1      4.963       5228.1  0  \n",
            "1         -0.1          93.200          -42.0      4.021       5195.8  0  \n",
            "2         -1.7          94.055          -39.8      0.729       4991.6  1  \n",
            "3         -1.8          93.075          -47.1      1.405       5099.1  0  \n",
            "4         -2.9          92.201          -31.4      0.869       5076.2  1  \n",
            "\n",
            "[5 rows x 21 columns]\n",
            "\n",
            "Display basic statistic of all columns: \n",
            "                age      duration      campaign         pdays      previous  \\\n",
            "count  41197.000000  41192.000000  41199.000000  41199.000000  41199.000000   \n",
            "mean      40.023812    258.274762      2.567514    962.485206      0.172941   \n",
            "std       10.434966    259.270089      2.769719    186.886905      0.494859   \n",
            "min        1.000000      0.000000      1.000000      0.000000      0.000000   \n",
            "25%       32.000000    102.000000      1.000000    999.000000      0.000000   \n",
            "50%       38.000000    180.000000      2.000000    999.000000      0.000000   \n",
            "75%       47.000000    319.000000      3.000000    999.000000      0.000000   \n",
            "max      104.000000   4918.000000     56.000000    999.000000      7.000000   \n",
            "\n",
            "       emp_var_rate  cons_price_idx  cons_conf_idx     euribor3m  \\\n",
            "count  41199.000000    41199.000000   41199.000000  41199.000000   \n",
            "mean       0.081900       93.575650     -40.502002      3.621336   \n",
            "std        1.570971        0.578845       4.628524      1.734431   \n",
            "min       -3.400000       92.201000     -50.800000      0.634000   \n",
            "25%       -1.800000       93.075000     -42.700000      1.344000   \n",
            "50%        1.100000       93.749000     -41.800000      4.857000   \n",
            "75%        1.400000       93.994000     -36.400000      4.961000   \n",
            "max        1.400000       94.767000     -26.900000      5.045000   \n",
            "\n",
            "        nr_employed             y  \n",
            "count  41199.000000  41199.000000  \n",
            "mean    5167.036455      0.112648  \n",
            "std       72.249592      0.316166  \n",
            "min     4963.600000      0.000000  \n",
            "25%     5099.100000      0.000000  \n",
            "50%     5191.000000      0.000000  \n",
            "75%     5228.100000      0.000000  \n",
            "max     5228.100000      1.000000  \n",
            "\n",
            "Display basic information of the columns: \n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 41199 entries, 0 to 41198\n",
            "Data columns (total 21 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   age             41197 non-null  float64\n",
            " 1   job             41199 non-null  object \n",
            " 2   marital         41199 non-null  object \n",
            " 3   education       41199 non-null  object \n",
            " 4   default         41199 non-null  object \n",
            " 5   housing         41199 non-null  object \n",
            " 6   loan            41199 non-null  object \n",
            " 7   contact         41193 non-null  object \n",
            " 8   month           41199 non-null  object \n",
            " 9   day_of_week     41199 non-null  object \n",
            " 10  duration        41192 non-null  float64\n",
            " 11  campaign        41199 non-null  int64  \n",
            " 12  pdays           41199 non-null  int64  \n",
            " 13  previous        41199 non-null  int64  \n",
            " 14  poutcome        41199 non-null  object \n",
            " 15  emp_var_rate    41199 non-null  float64\n",
            " 16  cons_price_idx  41199 non-null  float64\n",
            " 17  cons_conf_idx   41199 non-null  float64\n",
            " 18  euribor3m       41199 non-null  float64\n",
            " 19  nr_employed     41199 non-null  float64\n",
            " 20  y               41199 non-null  int64  \n",
            "dtypes: float64(7), int64(4), object(10)\n",
            "memory usage: 6.6+ MB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DLR-wmI9YGMT"
      },
      "source": [
        "### 3. Handle missing values\n",
        "\n",
        "**Remarks:**  \n",
        "Using .isnull we found rows with missing value:\n",
        "- age = 2\n",
        "- contact = 6\n",
        "- duration = 7\n",
        "\n",
        "Total rows with missing value = 15\n",
        "\n",
        "However, after dropna and checking with .isnull() again:  \n",
        "Before remove missing values: [41199 rows x 21 col]  \n",
        "After remove missing values: [41187 rows x 21 col]\n",
        "41199 - 41187 = 12 rows being dropped.\n",
        "\n",
        "**Why not 15 rows being dropped?**  \n",
        "Coz some of the missing values found with .isnull previously are occured on the same row.\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QAnRNAGz2kgH",
        "outputId": "03f624a8-c57f-4d13-c12f-16d6f77bcd6b"
      },
      "source": [
        "# Find how many missing values there are in the columns.\n",
        "print (Banking_Marketing_df.isnull().sum())"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "age               2\n",
            "job               0\n",
            "marital           0\n",
            "education         0\n",
            "default           0\n",
            "housing           0\n",
            "loan              0\n",
            "contact           6\n",
            "month             0\n",
            "day_of_week       0\n",
            "duration          7\n",
            "campaign          0\n",
            "pdays             0\n",
            "previous          0\n",
            "poutcome          0\n",
            "emp_var_rate      0\n",
            "cons_price_idx    0\n",
            "cons_conf_idx     0\n",
            "euribor3m         0\n",
            "nr_employed       0\n",
            "y                 0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BHsEX4ay2vaS",
        "outputId": "c7143295-8f24-4ced-86d1-eb5ec6c64899"
      },
      "source": [
        "# Remove missing values\n",
        "# [Before 41199 rows x 21 columns]\n",
        "print(\"Before remove missing values: [{} rows x {} col]\".format(Banking_Marketing_df.shape[0],Banking_Marketing_df.shape[1] ))\n",
        "\n",
        "Banking_Marketing_df = (Banking_Marketing_df.dropna())\n",
        "print(\"After remove missing values: [{} rows x {} col]\".format(Banking_Marketing_df.shape[0],Banking_Marketing_df.shape[1] ))\n",
        "print (Banking_Marketing_df.isnull().sum())"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Before remove missing values: [41199 rows x 21 col]\n",
            "After remove missing values: [41187 rows x 21 col]\n",
            "age               0\n",
            "job               0\n",
            "marital           0\n",
            "education         0\n",
            "default           0\n",
            "housing           0\n",
            "loan              0\n",
            "contact           0\n",
            "month             0\n",
            "day_of_week       0\n",
            "duration          0\n",
            "campaign          0\n",
            "pdays             0\n",
            "previous          0\n",
            "poutcome          0\n",
            "emp_var_rate      0\n",
            "cons_price_idx    0\n",
            "cons_conf_idx     0\n",
            "euribor3m         0\n",
            "nr_employed       0\n",
            "y                 0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9gLeuKCvZ_zm"
      },
      "source": [
        "### 4. Print frequent distribution of the education column"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 744
        },
        "id": "33j_e05225k4",
        "outputId": "69a7e053-6e4b-4213-d0c3-afd6d9b313d1"
      },
      "source": [
        "# Print the frequent distribution of the education column.\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(Banking_Marketing_df['education'].value_counts())\n",
        "Banking_Marketing_df['education'].value_counts().plot(kind='bar')\n",
        "plt.show()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "education\n",
            "university.degree      12167\n",
            "high.school             9516\n",
            "basic.9y                6045\n",
            "professional.course     5242\n",
            "basic.4y                4176\n",
            "basic.6y                2292\n",
            "unknown                 1731\n",
            "illiterate                18\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_jmqPLoablnZ"
      },
      "source": [
        "### 5. Reduce categories in education column\n",
        "\n",
        "1. Drop illiterate coz there are only 18 ppl\n",
        "2. Replace basic.4y, basic.6y and basic.9y with basic"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 692
        },
        "id": "2VxzaRFk3BIn",
        "outputId": "55b23f33-ddc9-4944-d2e8-2afc00df245d"
      },
      "source": [
        "# Reduce categories in education column\n",
        "import numpy as np\n",
        "\n",
        "# remove illiterate values coz there are only 18 ppl\n",
        "Banking_Marketing_df['education'].replace(to_replace=['illiterate'], value=np.NAN, inplace=True)\n",
        "\n",
        "Banking_Marketing_df['education'].replace(to_replace=['basic.4y', 'basic.6y', 'basic.9y'], value='Basic', inplace=True)\n",
        "print(Banking_Marketing_df['education'].value_counts())\n",
        "\n",
        "Banking_Marketing_df['education'].value_counts().plot(kind='bar')\n",
        "plt.show()"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "education\n",
            "Basic                  12513\n",
            "university.degree      12167\n",
            "high.school             9516\n",
            "professional.course     5242\n",
            "unknown                 1731\n",
            "Name: count, dtype: int64\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eA5g5R8-fXut"
      },
      "source": [
        "### 6. Select and perform a suitable encoding method data"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "z9ngzyuQf1Vv",
        "outputId": "d5baeb5f-d3cc-4b3f-93fd-b14333499b63"
      },
      "source": [
        "# Read Dataset and import LabelEncoder from sklearn.preprocessing package\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "print (Banking_Marketing_df.head())"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    age          job  marital          education  default housing loan  \\\n",
            "0  44.0  blue-collar  married              Basic  unknown     yes   no   \n",
            "1  53.0   technician  married            unknown       no      no   no   \n",
            "2  28.0   management   single  university.degree       no     yes   no   \n",
            "3  39.0     services  married        high.school       no      no   no   \n",
            "4  55.0      retired  married              Basic       no     yes   no   \n",
            "\n",
            "    contact month day_of_week  ...  campaign  pdays  previous     poutcome  \\\n",
            "0  cellular   aug         thu  ...         1    999         0  nonexistent   \n",
            "1  cellular   nov         fri  ...         1    999         0  nonexistent   \n",
            "2  cellular   jun         thu  ...         3      6         2      success   \n",
            "3  cellular   apr         fri  ...         2    999         0  nonexistent   \n",
            "4  cellular   aug         fri  ...         1      3         1      success   \n",
            "\n",
            "  emp_var_rate  cons_price_idx  cons_conf_idx  euribor3m  nr_employed  y  \n",
            "0          1.4          93.444          -36.1      4.963       5228.1  0  \n",
            "1         -0.1          93.200          -42.0      4.021       5195.8  0  \n",
            "2         -1.7          94.055          -39.8      0.729       4991.6  1  \n",
            "3         -1.8          93.075          -47.1      1.405       5099.1  0  \n",
            "4         -2.9          92.201          -31.4      0.869       5076.2  1  \n",
            "\n",
            "[5 rows x 21 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VZyeZWtCfd-m",
        "outputId": "162fefab-6f98-45d3-9dd4-c6e87fbcb854"
      },
      "source": [
        "# Select Non-Numerical Columns\n",
        "data_column_category = Banking_Marketing_df.select_dtypes (exclude=[np.number]).columns\n",
        "print (data_column_category)\n",
        "print (Banking_Marketing_df[data_column_category].head())"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact',\n",
            "       'month', 'day_of_week', 'poutcome'],\n",
            "      dtype='object')\n",
            "           job  marital          education  default housing loan   contact  \\\n",
            "0  blue-collar  married              Basic  unknown     yes   no  cellular   \n",
            "1   technician  married            unknown       no      no   no  cellular   \n",
            "2   management   single  university.degree       no     yes   no  cellular   \n",
            "3     services  married        high.school       no      no   no  cellular   \n",
            "4      retired  married              Basic       no     yes   no  cellular   \n",
            "\n",
            "  month day_of_week     poutcome  \n",
            "0   aug         thu  nonexistent  \n",
            "1   nov         fri  nonexistent  \n",
            "2   jun         thu      success  \n",
            "3   apr         fri  nonexistent  \n",
            "4   aug         fri      success  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cEacDgMafnBZ",
        "outputId": "09181800-18c4-4313-a056-25a8492ed4d6"
      },
      "source": [
        "# Remove Missing Data\n",
        "Banking_Marketing_df = Banking_Marketing_df.dropna()\n",
        "\n",
        "# Iterate through column to convert to numeric data using LabelEncoder ()\n",
        "label_encoder = LabelEncoder()\n",
        "for i in data_column_category:\n",
        "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
        "\n",
        "print(\"Label Encoder Data:\")\n",
        "print(Banking_Marketing_df.head())"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Label Encoder Data:\n",
            "    age  job  marital  education  default  housing  loan  contact  month  \\\n",
            "0  44.0    1        1          0        1        2     0        0      1   \n",
            "1  53.0    9        1          4        0        0     0        0      7   \n",
            "2  28.0    4        2          3        0        2     0        0      4   \n",
            "3  39.0    7        1          1        0        0     0        0      0   \n",
            "4  55.0    5        1          0        0        2     0        0      1   \n",
            "\n",
            "   day_of_week  ...  campaign  pdays  previous  poutcome  emp_var_rate  \\\n",
            "0            2  ...         1    999         0         1           1.4   \n",
            "1            0  ...         1    999         0         1          -0.1   \n",
            "2            2  ...         3      6         2         2          -1.7   \n",
            "3            0  ...         2    999         0         1          -1.8   \n",
            "4            0  ...         1      3         1         2          -2.9   \n",
            "\n",
            "   cons_price_idx  cons_conf_idx  euribor3m  nr_employed  y  \n",
            "0          93.444          -36.1      4.963       5228.1  0  \n",
            "1          93.200          -42.0      4.021       5195.8  0  \n",
            "2          94.055          -39.8      0.729       4991.6  1  \n",
            "3          93.075          -47.1      1.405       5099.1  0  \n",
            "4          92.201          -31.4      0.869       5076.2  1  \n",
            "\n",
            "[5 rows x 21 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n",
            "<ipython-input-12-76a3ae26e19c>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  Banking_Marketing_df[i] = label_encoder.fit_transform (Banking_Marketing_df[i])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i3nCrCjOhytT"
      },
      "source": [
        "### 7. Data Transformation\n",
        "- StandardScaler()\n",
        "- MinMaxScaler()"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RIwMO9Q93rLA",
        "outputId": "f62dc1db-0d02-47ff-eca6-1138019e49e8"
      },
      "source": [
        "# Data Transformation with StandardScaler()\n",
        "from sklearn import preprocessing\n",
        "\n",
        "# Check for Missing Data\n",
        "null_ = Banking_Marketing_df.isna().any()\n",
        "dtypes = Banking_Marketing_df.dtypes\n",
        "info = pd.concat ([null_,dtypes], axis = 1, keys = ['Null', 'type'])\n",
        "print(info) # This is different way of viewing data\n",
        "\n",
        "std_scale = preprocessing.StandardScaler().fit_transform (Banking_Marketing_df)\n",
        "scaled_frame = pd.DataFrame (std_scale, columns = Banking_Marketing_df.columns)\n",
        "print (scaled_frame.head())"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                 Null     type\n",
            "age             False  float64\n",
            "job             False    int64\n",
            "marital         False    int64\n",
            "education       False    int64\n",
            "default         False    int64\n",
            "housing         False    int64\n",
            "loan            False    int64\n",
            "contact         False    int64\n",
            "month           False    int64\n",
            "day_of_week     False    int64\n",
            "duration        False  float64\n",
            "campaign        False    int64\n",
            "pdays           False    int64\n",
            "previous        False    int64\n",
            "poutcome        False    int64\n",
            "emp_var_rate    False  float64\n",
            "cons_price_idx  False  float64\n",
            "cons_conf_idx   False  float64\n",
            "euribor3m       False  float64\n",
            "nr_employed     False  float64\n",
            "y               False    int64\n",
            "        age       job   marital  education   default  housing      loan  \\\n",
            "0  0.381639 -0.758034 -0.283849  -1.181730  1.945760  0.94217 -0.452461   \n",
            "1  1.245003  1.467358 -0.283849   1.886501 -0.513485 -1.08767 -0.452461   \n",
            "2 -1.153231  0.076488  1.358337   1.119443 -0.513485  0.94217 -0.452461   \n",
            "3 -0.098008  0.911010 -0.283849  -0.414672 -0.513485 -1.08767 -0.452461   \n",
            "4  1.436862  0.354662 -0.283849  -1.181730 -0.513485  0.94217 -0.452461   \n",
            "\n",
            "    contact     month  day_of_week  ...  campaign     pdays  previous  \\\n",
            "0 -0.758687 -1.392872    -0.003250  ... -0.565863  0.195394 -0.349509   \n",
            "1 -0.758687  1.193590    -1.434298  ... -0.565863  0.195394 -0.349509   \n",
            "2 -0.758687 -0.099641    -0.003250  ...  0.156046 -5.117871  3.691195   \n",
            "3 -0.758687 -1.823949    -1.434298  ... -0.204908  0.195394 -0.349509   \n",
            "4 -0.758687 -1.392872    -1.434298  ... -0.565863 -5.133923  1.670843   \n",
            "\n",
            "   poutcome  emp_var_rate  cons_price_idx  cons_conf_idx  euribor3m  \\\n",
            "0  0.192704      0.839009       -0.227748       0.951562   0.773526   \n",
            "1  0.192704     -0.115909       -0.649321      -0.323439   0.230395   \n",
            "2  2.948320     -1.134488        0.827915       0.151985  -1.667684   \n",
            "3  0.192704     -1.198149       -0.865292      -1.425558  -1.277920   \n",
            "4  2.948320     -1.898422       -2.375355       1.967241  -1.586964   \n",
            "\n",
            "   nr_employed         y  \n",
            "0     0.845113 -0.356229  \n",
            "1     0.398070 -0.356229  \n",
            "2    -2.428125  2.807184  \n",
            "3    -0.940290 -0.356229  \n",
            "4    -1.257233  2.807184  \n",
            "\n",
            "[5 rows x 21 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gROBfRImiJW3",
        "outputId": "809ac05a-e188-482e-f6b7-097c50615568"
      },
      "source": [
        "# Data Transformation with MinMax Scaler Method\n",
        "minmax_scale = preprocessing.MinMaxScaler().fit_transform (Banking_Marketing_df)\n",
        "scaled_frame = pd.DataFrame (minmax_scale, columns = Banking_Marketing_df.columns)\n",
        "print (scaled_frame.head())"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "        age       job   marital  education  default  housing  loan  contact  \\\n",
            "0  0.310345  0.090909  0.333333       0.00      0.5      1.0   0.0      0.0   \n",
            "1  0.413793  0.818182  0.333333       1.00      0.0      0.0   0.0      0.0   \n",
            "2  0.126437  0.363636  0.666667       0.75      0.0      1.0   0.0      0.0   \n",
            "3  0.252874  0.636364  0.333333       0.25      0.0      0.0   0.0      0.0   \n",
            "4  0.436782  0.454545  0.333333       0.00      0.0      1.0   0.0      0.0   \n",
            "\n",
            "      month  day_of_week  ...  campaign     pdays  previous  poutcome  \\\n",
            "0  0.111111          0.5  ...  0.000000  1.000000  0.000000       0.5   \n",
            "1  0.777778          0.0  ...  0.000000  1.000000  0.000000       0.5   \n",
            "2  0.444444          0.5  ...  0.036364  0.006006  0.285714       1.0   \n",
            "3  0.000000          0.0  ...  0.018182  1.000000  0.000000       0.5   \n",
            "4  0.111111          0.0  ...  0.000000  0.003003  0.142857       1.0   \n",
            "\n",
            "   emp_var_rate  cons_price_idx  cons_conf_idx  euribor3m  nr_employed    y  \n",
            "0      1.000000        0.484412       0.615063   0.981410     1.000000  0.0  \n",
            "1      0.687500        0.389322       0.368201   0.767853     0.877883  0.0  \n",
            "2      0.354167        0.722525       0.460251   0.021537     0.105860  1.0  \n",
            "3      0.333333        0.340608       0.154812   0.174790     0.512287  0.0  \n",
            "4      0.104167        0.000000       0.811715   0.053276     0.425709  1.0  \n",
            "\n",
            "[5 rows x 21 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D-SJR3iNjAQQ"
      },
      "source": [
        "## End of Assignment 2 (10%)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GhAGlnw64e3E"
      },
      "source": [
        "## Practical Week 04 - Neural Network with Keras\n",
        "### 8) Split data into train and test sets based on an 80/20 rule.\n",
        "### 9) Target data is the y column and independent is in the remaining columns (20 attributes → input_dim=20).\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Iy6NGwQX4RrG",
        "outputId": "0877ad6a-63b5-49b9-e5c2-46bf2889d07b"
      },
      "source": [
        "# Checking the Number of Levels in Categorical Variable\n",
        "levels = len (pd.value_counts(Banking_Marketing_df['education']))\n",
        "print ('There are {} levels in the education column'.format (levels))\n",
        "\n",
        "df_dummies = pd.get_dummies(Banking_Marketing_df, drop_first=True)\n",
        "print ('There are {} columns in df_dummies'.format (df_dummies.shape[1]))\n",
        "\n",
        "# Shuffle Rows Prior to Splitting Data into Features (X) and Outcome (Y)\n",
        "from sklearn.utils import shuffle\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "df_shuffled = shuffle (df_dummies, random_state=42) #random_state = 0, meaning no shuffling\n",
        "\n",
        "DV = 'y' # DV => Dependent variable\n",
        "\n",
        "x = df_shuffled.drop (DV, axis=1) # axis=1, drop the DV column, don't axis = 0\n",
        "y = df_shuffled [DV] # this our depenedent variable?\n",
        "\n",
        "# 20% for training, The rest for testing\n",
        "# random_state = 42 is used to select the 20% of the data set for testing randomly\n",
        "x_train, x_test, y_train, y_test = train_test_split (x, y, test_size=0.20, random_state=42)\n",
        "\n",
        "print (x_train.head ())"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-79c486baefaa>:2: FutureWarning: pandas.value_counts is deprecated and will be removed in a future version. Use pd.Series(obj).value_counts() instead.\n",
            "  levels = len (pd.value_counts(Banking_Marketing_df['education']))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "There are 5 levels in the education column\n",
            "There are 21 columns in df_dummies\n",
            "        age  job  marital  education  default  housing  loan  contact  month  \\\n",
            "23410  36.0    0        1          3        0        1     1        1      4   \n",
            "33437  41.0    1        1          0        1        0     0        1      4   \n",
            "10954  38.0    0        1          3        0        2     0        0      1   \n",
            "18405  48.0    0        2          3        0        2     0        0      3   \n",
            "32039  48.0    0        1          3        0        0     0        0      7   \n",
            "\n",
            "       day_of_week  duration  campaign  pdays  previous  poutcome  \\\n",
            "23410            0      71.0         2    999         0         1   \n",
            "33437            2     203.0         2    999         0         1   \n",
            "10954            0      82.0         7    999         0         1   \n",
            "18405            0     194.0         2      3         1         2   \n",
            "32039            0      66.0         3    999         0         1   \n",
            "\n",
            "       emp_var_rate  cons_price_idx  cons_conf_idx  euribor3m  nr_employed  \n",
            "23410           1.4          94.465          -41.8      4.959       5228.1  \n",
            "33437           1.4          94.465          -41.8      4.961       5228.1  \n",
            "10954           1.4          93.444          -36.1      4.966       5228.1  \n",
            "18405          -1.7          94.215          -40.3      0.790       4991.6  \n",
            "32039          -0.1          93.200          -42.0      4.021       5195.8  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MDcrvqX-IPLX"
      },
      "source": [
        "from sklearn import model_selection\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from sklearn.metrics import accuracy_score, precision_score\n",
        "from sklearn.metrics import recall_score, confusion_matrix, roc_curve, auc"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BRJ6_B_PIPLU"
      },
      "source": [
        "### Train and Test split\n",
        "A general practice is to split your data into a training and test set. You train/tune your model with your training set and test how well it generalizes to data it has never seen before with your test set.\n",
        "We will make use of scikit learn’s `train_test_split` method to achieve this"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "c0_6WA8wIPLU"
      },
      "source": [
        "x_train, x_test, y_train, y_test = model_selection.train_test_split(x, y, test_size=0.2, random_state=0) #80/20 split"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B3ZMCzw3IPLU",
        "outputId": "68ff6f5e-e589-4801-812f-566994d54761"
      },
      "source": [
        "x_train.shape, y_train.shape"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((32935, 20), (32935,))"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cjqJk42uIPLU",
        "outputId": "a6dca24a-f5b7-4ed5-a354-b88823a29616"
      },
      "source": [
        "x_test.shape, y_test.shape"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((8234, 20), (8234,))"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "GlYi43eQIPLX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "46cc79b2-023d-4c7e-dff4-4352e69a7636"
      },
      "source": [
        "model = Sequential()\n",
        "model.add(Dense(10, input_dim=20, activation='tanh'))\n",
        "\n",
        "model.add(Dense(1, activation='sigmoid'))"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "qOTv6cs0IPLX"
      },
      "source": [
        "model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "collapsed": true,
        "id": "ZE5otsjOIPLY"
      },
      "source": [
        "x_train_keras = np.array(x_train)\n",
        "y_train_keras = np.array(y_train)\n",
        "y_train_keras = y_train_keras.reshape(y_train_keras.shape[0], 1)"
      ],
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_-dYSNVAIPLY",
        "outputId": "d732393f-ce68-4d2a-c769-6adf99e1234b"
      },
      "source": [
        "model.fit(np.array(x_train_keras), np.array(y_train_keras), epochs=50, batch_size=100, shuffle=True)"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - accuracy: 0.8916 - loss: 0.4229\n",
            "Epoch 2/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8868 - loss: 0.3076\n",
            "Epoch 3/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8880 - loss: 0.2852\n",
            "Epoch 4/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8873 - loss: 0.2755\n",
            "Epoch 5/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.8985 - loss: 0.2642\n",
            "Epoch 6/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9038 - loss: 0.2675\n",
            "Epoch 7/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.9030 - loss: 0.2650\n",
            "Epoch 8/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.8943 - loss: 0.2508\n",
            "Epoch 9/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.8816 - loss: 0.2691\n",
            "Epoch 10/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.8883 - loss: 0.2585\n",
            "Epoch 11/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8876 - loss: 0.2618\n",
            "Epoch 12/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8879 - loss: 0.2647\n",
            "Epoch 13/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.8981 - loss: 0.2583\n",
            "Epoch 14/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9025 - loss: 0.2624\n",
            "Epoch 15/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9005 - loss: 0.2628\n",
            "Epoch 16/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9046 - loss: 0.2647\n",
            "Epoch 17/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9097 - loss: 0.2543\n",
            "Epoch 18/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8944 - loss: 0.2574\n",
            "Epoch 19/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8896 - loss: 0.2634\n",
            "Epoch 20/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8859 - loss: 0.2571\n",
            "Epoch 21/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.9004 - loss: 0.2643\n",
            "Epoch 22/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9040 - loss: 0.2553\n",
            "Epoch 23/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9020 - loss: 0.2579\n",
            "Epoch 24/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.8981 - loss: 0.2589\n",
            "Epoch 25/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.8879 - loss: 0.2584\n",
            "Epoch 26/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.8927 - loss: 0.2538\n",
            "Epoch 27/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9022 - loss: 0.2641\n",
            "Epoch 28/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9032 - loss: 0.2605\n",
            "Epoch 29/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9003 - loss: 0.2563\n",
            "Epoch 30/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.8927 - loss: 0.2558\n",
            "Epoch 31/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.8998 - loss: 0.2565\n",
            "Epoch 32/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9083 - loss: 0.2528\n",
            "Epoch 33/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9039 - loss: 0.2516\n",
            "Epoch 34/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step - accuracy: 0.8896 - loss: 0.2579\n",
            "Epoch 35/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.8880 - loss: 0.2605\n",
            "Epoch 36/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step - accuracy: 0.9033 - loss: 0.2479\n",
            "Epoch 37/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8976 - loss: 0.2696\n",
            "Epoch 38/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.9015 - loss: 0.2793\n",
            "Epoch 39/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8919 - loss: 0.2719\n",
            "Epoch 40/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8875 - loss: 0.2786\n",
            "Epoch 41/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.8875 - loss: 0.2883\n",
            "Epoch 42/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 4ms/step - accuracy: 0.8877 - loss: 0.2704\n",
            "Epoch 43/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.8875 - loss: 0.2716\n",
            "Epoch 44/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - accuracy: 0.8893 - loss: 0.2807\n",
            "Epoch 45/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 2ms/step - accuracy: 0.8871 - loss: 0.2738\n",
            "Epoch 46/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.8875 - loss: 0.2744\n",
            "Epoch 47/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - accuracy: 0.8868 - loss: 0.2718\n",
            "Epoch 48/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 5ms/step - accuracy: 0.8876 - loss: 0.2774\n",
            "Epoch 49/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 5ms/step - accuracy: 0.8885 - loss: 0.2732\n",
            "Epoch 50/50\n",
            "\u001b[1m330/330\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 6ms/step - accuracy: 0.8907 - loss: 0.2743\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.src.callbacks.history.History at 0x7ed3ea165720>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ixKn-XVlIPLY",
        "outputId": "3821d792-c95b-4b81-b34d-34b81ab632a6"
      },
      "source": [
        "scores = model.evaluate(np.array(x_test), np.array(y_test))"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m258/258\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 3ms/step - accuracy: 0.9013 - loss: 0.2953\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dqvO3de5IPLY",
        "outputId": "2c20c663-63c7-463d-d623-2afe8cf514d5"
      },
      "source": [
        "print(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "compile_metrics: 90.49%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JOLutILRFeZd"
      },
      "source": [
        "### 10.Model evaluation\n",
        "Let us evaluate the model using:\n",
        "- accuracy\n",
        "- precision\n",
        "- recall\n",
        "- receiver operating characteristic (ROC) curve\n",
        "- area under the curve (AUC)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vf-8JXeQZTQc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4706d669-07fb-4da4-9356-3093b67380a6"
      },
      "source": [
        "# Get predictions\n",
        "train_set_preds = [round(x[0]) for x in model.predict(x_train)]\n",
        "test_set_preds = [round(x[0]) for x in model.predict(x_test)]"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1030/1030\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step\n",
            "\u001b[1m258/258\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cHX_9T2-ZaKz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "629a0e5f-6b1d-4a10-93f2-50657db78d93"
      },
      "source": [
        "print('Accuracy for test set: %0.4f' % accuracy_score(y_test, test_set_preds))\n",
        "print('Accuracy for train set: %0.4f' % accuracy_score(y_train, train_set_preds))\n",
        "\n",
        "print('\\n')\n",
        "\n",
        "print('Precision for test set: %0.4f' % precision_score(y_test, test_set_preds))\n",
        "print('Precision for train set: %0.4f' % precision_score(y_train, train_set_preds))\n",
        "\n",
        "print('\\n')\n",
        "\n",
        "print('Recall for test set: %0.4f' % recall_score(y_test, test_set_preds))\n",
        "print('Recall for train set: %0.4f' % recall_score(y_train, train_set_preds))"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy for test set: 0.9049\n",
            "Accuracy for train set: 0.9050\n",
            "\n",
            "\n",
            "Precision for test set: 0.6231\n",
            "Precision for train set: 0.6096\n",
            "\n",
            "\n",
            "Recall for test set: 0.4251\n",
            "Recall for train set: 0.4260\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GMvZH5iRZyM-",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5a7c1a42-93fc-42b0-ab44-726edeafcd6d"
      },
      "source": [
        "train_preds = [x[0] for x in model.predict(x_train)]\n",
        "test_preds = [x[0] for x in model.predict(x_test)]"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1030/1030\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\n",
            "\u001b[1m258/258\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 1ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LIpxllJiZ53b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "72dbb3c4-e95e-4da7-93ca-970a770fde48"
      },
      "source": [
        "# Get AUC and ROC\n",
        "train_fpr, train_tpr, train_thresholds = roc_curve(y_train, train_preds)\n",
        "test_fpr, test_tpr, test_thresholds = roc_curve(y_test, test_preds)\n",
        "\n",
        "train_roc_auc = auc(train_fpr, train_tpr)\n",
        "test_roc_auc = auc(test_fpr, test_tpr)\n",
        "\n",
        "print('AUC for train set: %0.4f' % train_roc_auc)\n",
        "print('AUC for test set: %0.4f' % test_roc_auc)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "AUC for train set: 0.7008\n",
            "AUC for test set: 0.6997\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4nitlhElFSbB",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "outputId": "53cb20da-cad7-4fb3-8361-9d3249523224"
      },
      "source": [
        "# Visualize ROC curve\n",
        "plt.figure(figsize=(7, 5), dpi=80)\n",
        "plt.plot(test_fpr,\n",
        "         test_tpr,\n",
        "         color='tomato',\n",
        "         label='ROC curve for test set (area = %0.4f)' % test_roc_auc)\n",
        "plt.plot(train_fpr,\n",
        "         train_tpr,\n",
        "         color='dodgerblue',\n",
        "         label='ROC curve for train set (area = %0.4f)' % train_roc_auc)\n",
        "\n",
        "plt.plot([0, 1], [0, 1], color='gray', lw=1, linestyle='--')\n",
        "plt.xlim([0.0, 1.0])\n",
        "plt.ylim([0.0, 1.05])\n",
        "plt.xlabel('False Positive Rate', fontsize=14)\n",
        "plt.ylabel('True Positive Rate', fontsize=14)\n",
        "plt.title('ROC Curve', fontsize=16)\n",
        "plt.legend(loc=\"lower right\")\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 560x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Rv2GPKIraO0P"
      },
      "source": [
        "Although the accuracy is 88.57% but AUC for the test set is 0.77, means it is an OK model but not exactly great to predict if the client will subscribe a term deposit  ."
      ]
    }
  ]
}